<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="CommandBase" Id="{ada50c45-e2a4-0e1e-2882-6555ee7dd9e0}" SpecialFunc="None">
    <Declaration><![CDATA[// Basic implementation of a default command class for PCS interagtion with internal structure of ``ST_CommandBaseHandshake``.
// Aditional IN and OUT parameters should be declared in the derived implementation.
FUNCTION_BLOCK PUBLIC CommandBase IMPLEMENTS ICommand
VAR_IN_OUT
	(* Use Class Properties for IN_OUT Parameters!!! *)
END_VAR
VAR
	stHandshake		: ST_CommandBaseHandshake;		// Internal variable strukture for communication with PCS.
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// OO-Class 
;]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{ea835809-8527-04fc-2537-4ead9acb0d0c}">
      <Declaration><![CDATA[// Abort the ``Task`` Execution with the result code ``Cancelled``
METHOD PUBLIC Abort
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Done(E_CommandResultCode.Cancelled);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalculateProgress" Id="{a16648df-eb2b-0767-0ec1-b2c892b01c2b}">
      <Declaration><![CDATA[// Can be used to calculate the ``stHandshake.nProgress`` and ``stHandshake.nSubTask``
METHOD PROTECTED CalculateProgress
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF stHandshake.nResultCode = E_CommandResultCode.Done THEN
	stHandshake.nProgress := 100;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="{122b0574-ff69-07fc-29ae-2aea1e238cec}">
      <Declaration><![CDATA[// The method is called in each cycle to execute the funktional part and the states of the command implementation.
METHOD PUBLIC Call
VAR
	bInit		: BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Starting Case
stHandshake.bBusy S= bInit := (stHandshake.bExecute AND NOT stHandshake.bBusy);
IF bInit THEN
	stHandshake.nResultCode := E_CommandResultCode.Init;
	Init();
END_IF

// Cancel Case
IF NOT stHandshake.bExecute AND stHandshake.bBusy THEN
	Abort();
END_IF

// Running Case
IF stHandshake.bExecute AND stHandshake.bBusy THEN
	
	// Set Task init on First Call
	IF Task() THEN
		Done(E_CommandResultCode.Done);
	END_IF
		
	CalculateProgress();	
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Done" Id="{38ab0c16-9dcb-0710-3b7a-4cc8228c26d9}">
      <Declaration><![CDATA[// Can be use to finish the ``Task`` Execution with a ``nResultCode``. 
METHOD PROTECTED Done
VAR_INPUT
	nResultCode		: UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[stHandshake.bBusy := stHandshake.bExecute := FALSE;
stHandshake.nResultCode := nResultCode;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{73b42678-0303-042f-2b5e-b8719716b1e0}">
      <Declaration><![CDATA[// Will be executed in the same cycle ``stHandshake.bExecute`` changes to ``true``
METHOD PROTECTED Init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stHandshake.nResultCode := E_CommandResultCode.Running;
stHandshake.nProgress := 0;
stHandshake.nSubTask := 0;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Progress" Id="{11d7213a-75df-05a5-3911-c70fda26068b}">
      <Declaration><![CDATA[// Set the Progress from everywhere in the application (Regular from CalculateProgress Method)
PROPERTY PROTECTED Progress : BYTE]]></Declaration>
      <Get Name="Get" Id="{c53dadf5-7315-05cc-3a61-3ca6f99e45f9}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Progress := stHandshake.nProgress;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{f433abb7-fe0c-0c14-2493-599cdeee1e2b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stHandshake.nProgress := Progress;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SubTask" Id="{91ef01b2-b368-094f-0905-247a111f2a9e}">
      <Declaration><![CDATA[// Set the SubTask Information from everywhere in the application (Regular from CalculateProgress Method)
PROPERTY PROTECTED SubTask : UINT]]></Declaration>
      <Get Name="Get" Id="{3e9e1d4d-b86f-0b19-192c-a177a58c94f5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SubTask := stHandshake.nSubTask;
]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{52959122-866e-0ed0-07d0-b14507bb4e0d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[stHandshake.nSubTask := SubTask;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Task" Id="{50b60cf9-4807-097f-189d-1bed3be2c16e}">
      <Declaration><![CDATA[// Execute the funktional part of the command implementation. Will be executed in the same cycle ``stHandshake.bExecute`` changes to ``true`` after the ``Init`` Method
METHOD PROTECTED Task : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Task complete if return true
Task := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="CommandBase">
      <LineId Id="94" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.Abort">
      <LineId Id="15" Count="1" />
    </LineIds>
    <LineIds Name="CommandBase.CalculateProgress">
      <LineId Id="5" Count="2" />
    </LineIds>
    <LineIds Name="CommandBase.Call">
      <LineId Id="40" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="27" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.Done">
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.Init">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.Progress.Get">
      <LineId Id="2" Count="1" />
    </LineIds>
    <LineIds Name="CommandBase.Progress.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.SubTask.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.SubTask.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="CommandBase.Task">
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>